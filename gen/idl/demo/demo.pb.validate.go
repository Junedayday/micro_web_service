// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: idl/demo/demo.proto

package demo

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DemoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DemoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DemoRequestMultiError, or
// nil if none found.
func (m *DemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return DemoRequestMultiError(errors)
	}
	return nil
}

// DemoRequestMultiError is an error wrapping multiple validation errors
// returned by DemoRequest.ValidateAll() if the designated constraints aren't met.
type DemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DemoRequestMultiError) AllErrors() []error { return m }

// DemoRequestValidationError is the validation error returned by
// DemoRequest.Validate if the designated constraints aren't met.
type DemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DemoRequestValidationError) ErrorName() string { return "DemoRequestValidationError" }

// Error satisfies the builtin error interface
func (e DemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DemoRequestValidationError{}

// Validate checks the field values on DemoResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DemoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DemoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DemoResponseMultiError, or
// nil if none found.
func (m *DemoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DemoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return DemoResponseMultiError(errors)
	}
	return nil
}

// DemoResponseMultiError is an error wrapping multiple validation errors
// returned by DemoResponse.ValidateAll() if the designated constraints aren't met.
type DemoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DemoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DemoResponseMultiError) AllErrors() []error { return m }

// DemoResponseValidationError is the validation error returned by
// DemoResponse.Validate if the designated constraints aren't met.
type DemoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DemoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DemoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DemoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DemoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DemoResponseValidationError) ErrorName() string { return "DemoResponseValidationError" }

// Error satisfies the builtin error interface
func (e DemoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDemoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DemoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DemoResponseValidationError{}

// Validate checks the field values on EmptyMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyMessageMultiError, or
// nil if none found.
func (m *EmptyMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMessageMultiError(errors)
	}
	return nil
}

// EmptyMessageMultiError is an error wrapping multiple validation errors
// returned by EmptyMessage.ValidateAll() if the designated constraints aren't met.
type EmptyMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMessageMultiError) AllErrors() []error { return m }

// EmptyMessageValidationError is the validation error returned by
// EmptyMessage.Validate if the designated constraints aren't met.
type EmptyMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyMessageValidationError) ErrorName() string { return "EmptyMessageValidationError" }

// Error satisfies the builtin error interface
func (e EmptyMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyMessageValidationError{}
